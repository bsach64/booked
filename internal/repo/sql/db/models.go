// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type NotificationStatus string

const (
	NotificationStatusToNotify NotificationStatus = "to_notify"
	NotificationStatusNotified NotificationStatus = "notified"
)

func (e *NotificationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationStatus(s)
	case string:
		*e = NotificationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationStatus: %T", src)
	}
	return nil
}

type NullNotificationStatus struct {
	NotificationStatus NotificationStatus
	Valid              bool // Valid is true if NotificationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotificationStatus), nil
}

type TicketStatus string

const (
	TicketStatusAvailable TicketStatus = "available"
	TicketStatusBooked    TicketStatus = "booked"
	TicketStatusCancelled TicketStatus = "cancelled"
)

func (e *TicketStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TicketStatus(s)
	case string:
		*e = TicketStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TicketStatus: %T", src)
	}
	return nil
}

type NullTicketStatus struct {
	TicketStatus TicketStatus
	Valid        bool // Valid is true if TicketStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTicketStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TicketStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TicketStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTicketStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TicketStatus), nil
}

type UserRole string

const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Event struct {
	ID          pgtype.UUID
	Name        string
	Time        pgtype.Timestamp
	Address     string
	Description string
	Latitude    pgtype.Float8
	Longitude   pgtype.Float8
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type Ticket struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	EventID   pgtype.UUID
	Status    TicketStatus
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type User struct {
	ID             pgtype.UUID
	Name           string
	HashedPassword string
	Email          string
	Role           UserRole
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
}

type Waitlist struct {
	ID        pgtype.UUID
	Count     int32
	UserID    pgtype.UUID
	EventID   pgtype.UUID
	Status    NotificationStatus
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}
