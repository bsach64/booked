// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: waitlist.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addToWaitlist = `-- name: AddToWaitlist :exec
INSERT INTO waitlist (id, user_id, event_id, count, status)
VALUES ($1, $2, $3, $4, 'to_notify')
`

type AddToWaitlistParams struct {
	ID      pgtype.UUID
	UserID  pgtype.UUID
	EventID pgtype.UUID
	Count   int32
}

func (q *Queries) AddToWaitlist(ctx context.Context, arg AddToWaitlistParams) error {
	_, err := q.db.Exec(ctx, addToWaitlist,
		arg.ID,
		arg.UserID,
		arg.EventID,
		arg.Count,
	)
	return err
}

const getWaitlistEntry = `-- name: GetWaitlistEntry :one
SELECT id, count, user_id, event_id, status, created_at, updated_at FROM waitlist WHERE user_id = $1 AND event_id = $2
`

type GetWaitlistEntryParams struct {
	UserID  pgtype.UUID
	EventID pgtype.UUID
}

func (q *Queries) GetWaitlistEntry(ctx context.Context, arg GetWaitlistEntryParams) (Waitlist, error) {
	row := q.db.QueryRow(ctx, getWaitlistEntry, arg.UserID, arg.EventID)
	var i Waitlist
	err := row.Scan(
		&i.ID,
		&i.Count,
		&i.UserID,
		&i.EventID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWaitlistNotificationDetails = `-- name: GetWaitlistNotificationDetails :many
SELECT
    u.name AS user_name,
    u.email AS user_email,
    e.name AS event_name,
    w."count",
    e.time AS event_time,
    e.id AS event_id,
    w.id AS waitlist_id
FROM users u
JOIN waitlist w ON u.id = w.user_id
JOIN events e ON e.id = w.event_id
WHERE w.status = 'to_notify'
`

type GetWaitlistNotificationDetailsRow struct {
	UserName   string
	UserEmail  string
	EventName  string
	Count      int32
	EventTime  pgtype.Timestamp
	EventID    pgtype.UUID
	WaitlistID pgtype.UUID
}

func (q *Queries) GetWaitlistNotificationDetails(ctx context.Context) ([]GetWaitlistNotificationDetailsRow, error) {
	rows, err := q.db.Query(ctx, getWaitlistNotificationDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWaitlistNotificationDetailsRow
	for rows.Next() {
		var i GetWaitlistNotificationDetailsRow
		if err := rows.Scan(
			&i.UserName,
			&i.UserEmail,
			&i.EventName,
			&i.Count,
			&i.EventTime,
			&i.EventID,
			&i.WaitlistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWaitlistStatus = `-- name: UpdateWaitlistStatus :exec
UPDATE waitlist SET status = $1 WHERE id = ANY($2::uuid[])
`

type UpdateWaitlistStatusParams struct {
	Status  NotificationStatus
	Column2 []pgtype.UUID
}

func (q *Queries) UpdateWaitlistStatus(ctx context.Context, arg UpdateWaitlistStatusParams) error {
	_, err := q.db.Exec(ctx, updateWaitlistStatus, arg.Status, arg.Column2)
	return err
}
