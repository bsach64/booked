// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (
	id, name, time, address, description, latitude, longitude
) VALUES (
	$1, $2, $3, $4, $5, $6, $7
)
`

type CreateEventParams struct {
	ID          pgtype.UUID
	Name        string
	Time        pgtype.Timestamp
	Address     string
	Description string
	Latitude    pgtype.Float8
	Longitude   pgtype.Float8
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.ID,
		arg.Name,
		arg.Time,
		arg.Address,
		arg.Description,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}

const deleteEvent = `-- name: DeleteEvent :one
DELETE FROM events CASCADE WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteEvent(ctx context.Context, id pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, deleteEvent, id)
	err := row.Scan(&id)
	return id, err
}

const getEventByID = `-- name: GetEventByID :one
SELECT
	e.id, e.name, e.time, e.address, e.description, e.latitude, e.longitude, e.created_at, e.updated_at,
	COUNT(t.id) AS total_tickets
FROM
	events e
JOIN
	tickets t
ON
	e.id = t.event_id
WHERE
	e.id = $1
GROUP BY
	e.id
`

type GetEventByIDRow struct {
	ID           pgtype.UUID
	Name         string
	Time         pgtype.Timestamp
	Address      string
	Description  string
	Latitude     pgtype.Float8
	Longitude    pgtype.Float8
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
	TotalTickets int64
}

func (q *Queries) GetEventByID(ctx context.Context, id pgtype.UUID) (GetEventByIDRow, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i GetEventByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Time,
		&i.Address,
		&i.Description,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TotalTickets,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT
	e.id, e.name, e.time, e.address, e.description, e.latitude, e.longitude, e.created_at, e.updated_at,
	COUNT(t.id) AS total_tickets,
	COUNT(t.id) FILTER (WHERE t.status = 'available' OR t.status = 'cancelled') AS available_tickets
FROM
	events e
JOIN
	tickets t
ON
	e.id = t.event_id
GROUP BY
	e.id
ORDER BY
	e.time ASC
LIMIT $1
`

type GetEventsRow struct {
	ID               pgtype.UUID
	Name             string
	Time             pgtype.Timestamp
	Address          string
	Description      string
	Latitude         pgtype.Float8
	Longitude        pgtype.Float8
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
	TotalTickets     int64
	AvailableTickets int64
}

func (q *Queries) GetEvents(ctx context.Context, limit int32) ([]GetEventsRow, error) {
	rows, err := q.db.Query(ctx, getEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsRow
	for rows.Next() {
		var i GetEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Time,
			&i.Address,
			&i.Description,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalTickets,
			&i.AvailableTickets,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextEvents = `-- name: GetNextEvents :many
SELECT 
	e.id, e.name, e.time, e.address, e.description, e.latitude, e.longitude, e.created_at, e.updated_at,
	COUNT(t.id) AS total_tickets,
	COUNT(t.id) FILTER (WHERE t.status = 'available') AS available_tickets
FROM
	events e
JOIN
	tickets t
ON
	e.id = t.event_id
WHERE
	time > $1
GROUP BY
	e.id
ORDER BY
	e.time ASC
LIMIT $2
`

type GetNextEventsParams struct {
	Time  pgtype.Timestamp
	Limit int32
}

type GetNextEventsRow struct {
	ID               pgtype.UUID
	Name             string
	Time             pgtype.Timestamp
	Address          string
	Description      string
	Latitude         pgtype.Float8
	Longitude        pgtype.Float8
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
	TotalTickets     int64
	AvailableTickets int64
}

func (q *Queries) GetNextEvents(ctx context.Context, arg GetNextEventsParams) ([]GetNextEventsRow, error) {
	rows, err := q.db.Query(ctx, getNextEvents, arg.Time, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNextEventsRow
	for rows.Next() {
		var i GetNextEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Time,
			&i.Address,
			&i.Description,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalTickets,
			&i.AvailableTickets,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE 
	events
SET
	name = $2, time = $3, address = $4, description = $5, latitude = $6, longitude = $7, updated_at = NOW()
WHERE
	id = $1
`

type UpdateEventParams struct {
	ID          pgtype.UUID
	Name        string
	Time        pgtype.Timestamp
	Address     string
	Description string
	Latitude    pgtype.Float8
	Longitude   pgtype.Float8
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.Exec(ctx, updateEvent,
		arg.ID,
		arg.Name,
		arg.Time,
		arg.Address,
		arg.Description,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}
