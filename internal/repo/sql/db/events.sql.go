// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (
	id, name, time, address, description, latitude, longitude, seat_count
) VALUES (
	$1, $2, $3, $4, $5, $6, $7, $8
)
`

type CreateEventParams struct {
	ID          pgtype.UUID
	Name        string
	Time        pgtype.Timestamp
	Address     string
	Description string
	Latitude    pgtype.Float8
	Longitude   pgtype.Float8
	SeatCount   int64
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.ID,
		arg.Name,
		arg.Time,
		arg.Address,
		arg.Description,
		arg.Latitude,
		arg.Longitude,
		arg.SeatCount,
	)
	return err
}

const deleteEvent = `-- name: DeleteEvent :one
DELETE FROM events CASCADE WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteEvent(ctx context.Context, id pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, deleteEvent, id)
	err := row.Scan(&id)
	return id, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, name, time, address, description, seat_count, latitude, longitude, created_at, updated_at FROM events ORDER BY time ASC LIMIT $1
`

func (q *Queries) GetEvents(ctx context.Context, limit int32) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Time,
			&i.Address,
			&i.Description,
			&i.SeatCount,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextEvents = `-- name: GetNextEvents :many
SELECT id, name, time, address, description, seat_count, latitude, longitude, created_at, updated_at FROM events WHERE time > $1 ORDER BY time ASC LIMIT $2
`

type GetNextEventsParams struct {
	Time  pgtype.Timestamp
	Limit int32
}

func (q *Queries) GetNextEvents(ctx context.Context, arg GetNextEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, getNextEvents, arg.Time, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Time,
			&i.Address,
			&i.Description,
			&i.SeatCount,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
