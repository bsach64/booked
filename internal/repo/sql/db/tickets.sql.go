// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tickets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bookTickets = `-- name: BookTickets :exec
UPDATE tickets SET user_id = $1, status = 'booked', updated_at = NOW() WHERE id = ANY($2::uuid[])
`

type BookTicketsParams struct {
	UserID  pgtype.UUID
	Column2 []pgtype.UUID
}

func (q *Queries) BookTickets(ctx context.Context, arg BookTicketsParams) error {
	_, err := q.db.Exec(ctx, bookTickets, arg.UserID, arg.Column2)
	return err
}

const cancelTickets = `-- name: CancelTickets :exec
UPDATE tickets SET user_id = NULL, status = 'cancelled', updated_at = NOW() WHERE id = ANY($1::uuid[])
`

func (q *Queries) CancelTickets(ctx context.Context, dollar_1 []pgtype.UUID) error {
	_, err := q.db.Exec(ctx, cancelTickets, dollar_1)
	return err
}

type CreateTicketsParams struct {
	ID      pgtype.UUID
	EventID pgtype.UUID
}

const getAnalytics = `-- name: GetAnalytics :many
SELECT
	event_id,
	COUNT(id) AS total_seats,
	COUNT(id) FILTER (WHERE status = 'booked') AS booked_tickets,
	(COUNT(id) FILTER (WHERE status = 'booked')::DOUBLE PRECISION / NULLIF(COUNT(id), 0)::DOUBLE PRECISION)::DOUBLE PRECISION AS capacity_utilisation,
	COUNT(id) FILTER (WHERE status = 'booked' AND updated_at::date = CURRENT_DATE) AS today_booked_tickets
FROM
	tickets
GROUP BY
	event_id
ORDER BY
	capacity_utilisation DESC NULLS LAST
`

type GetAnalyticsRow struct {
	EventID             pgtype.UUID
	TotalSeats          int64
	BookedTickets       int64
	CapacityUtilisation float64
	TodayBookedTickets  int64
}

func (q *Queries) GetAnalytics(ctx context.Context) ([]GetAnalyticsRow, error) {
	rows, err := q.db.Query(ctx, getAnalytics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnalyticsRow
	for rows.Next() {
		var i GetAnalyticsRow
		if err := rows.Scan(
			&i.EventID,
			&i.TotalSeats,
			&i.BookedTickets,
			&i.CapacityUtilisation,
			&i.TodayBookedTickets,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvailableTickets = `-- name: GetAvailableTickets :many
SELECT id FROM tickets WHERE event_id = $1 AND (status = 'available' OR status = 'cancelled')
`

func (q *Queries) GetAvailableTickets(ctx context.Context, eventID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getAvailableTickets, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var id pgtype.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookedTickets = `-- name: GetBookedTickets :many
SELECT id FROM tickets WHERE event_id = $1 AND user_id = $2 AND status = 'booked'
`

type GetBookedTicketsParams struct {
	EventID pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) GetBookedTickets(ctx context.Context, arg GetBookedTicketsParams) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getBookedTickets, arg.EventID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var id pgtype.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingHistory = `-- name: GetBookingHistory :many
SELECT
	events.id,
	name,
	time,
	address,
	description,
	latitude,
	longitude,
	COUNT(tickets.id),
	MAX(tickets.updated_at)::TIMESTAMP
FROM
	tickets
JOIN
	events
ON
	tickets.event_id = events.id
WHERE
	tickets.user_id = $1 AND
	tickets.status = 'booked'
GROUP BY events.id
`

type GetBookingHistoryRow struct {
	ID          pgtype.UUID
	Name        string
	Time        pgtype.Timestamp
	Address     string
	Description string
	Latitude    pgtype.Float8
	Longitude   pgtype.Float8
	Count       int64
	Column9     pgtype.Timestamp
}

func (q *Queries) GetBookingHistory(ctx context.Context, userID pgtype.UUID) ([]GetBookingHistoryRow, error) {
	rows, err := q.db.Query(ctx, getBookingHistory, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookingHistoryRow
	for rows.Next() {
		var i GetBookingHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Time,
			&i.Address,
			&i.Description,
			&i.Latitude,
			&i.Longitude,
			&i.Count,
			&i.Column9,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCancellationRates = `-- name: GetCancellationRates :many
SELECT
	event_id,
	COALESCE(
		(
			COUNT(id) FILTER (WHERE status = 'cancelled')::DOUBLE PRECISION
			/
			NULLIF(
				COUNT(id) FILTER (WHERE status = 'booked' OR status = 'cancelled')::DOUBLE PRECISION,
				0
			)
		),
		0
	)::DOUBLE PRECISION AS cancellation_rate
FROM
	tickets
GROUP BY
	event_id
`

type GetCancellationRatesRow struct {
	EventID          pgtype.UUID
	CancellationRate float64
}

func (q *Queries) GetCancellationRates(ctx context.Context) ([]GetCancellationRatesRow, error) {
	rows, err := q.db.Query(ctx, getCancellationRates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCancellationRatesRow
	for rows.Next() {
		var i GetCancellationRatesRow
		if err := rows.Scan(&i.EventID, &i.CancellationRate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
